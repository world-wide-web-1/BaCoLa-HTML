native function comments
  (ARGS) => {
    return;
  }
constructor comments ({//$1},{[["1","comment"]]},{[]})


native function string
  (ARGS) => {
    return String(ARGS.txt);
  }
constructor string ({"$1"},{[["1","txt"]]},{[]})


constructor string ({'$1'},{[["1","txt"]]},{[]})
native function print
  (ARGS) => {
    if (typeof(ARGS.txt) == 'number') {
      console.log(`#${ARGS.txt}#\n`);
    } else {
      console.log(`${String(ARGS.txt)}\n`);
    }
  }
constructor print ({print = $1.},{[["1","txt"]]},{["txt"]})

native function alert
  (ARGS) => {
    if (typeof(ARGS.txt) == 'number') {
      alert(`#${ARGS.txt}#\n`);
    } else {
      alert(`${String(ARGS.txt)}\n`);
    }
  }
constructor alert ({alert = $1.},{[["1","txt"]]},{["txt"]})

native function true
  () => {
    return true
  }

constructor true ({true},{[]},{[]})

native function false
  () => {
    return false
  }

constructor false ({false},{[]},{[]})

native function exit
  (ARGS) => {
    return
  }

constructor exit ({exit.},{[]},{[]})

//native function eatme.md
//  (ARGS) => {
//    return "pls eatme.md"
//  }

//constructor eatme.md ({eatmeDOTmd},{[]},{[]})

native function clear
  (ARGS) => {
    console.clear()
  }

constructor clear ({clear.},{[]},{[]})

native function number
  (ARGS) => {
    return Number(ARGS.num)
  }

constructor number ({#$1#},{[["1","num"]]},{[]})

//default (start exec)

native function floor
  (ARGS) => {
    return Math.floor(ARGS.num);
  }
constructor floor ({#_ $1 _#},{[["1","num"]]},{["num"]})
native function letter
  (ARGS) => {
    return;
  }
constructor letter ({a.},{[]},{[]})
constructor exit ({e.},{[]},{[]})

native function multilineComments
  (ARGS) => {
    return;
  }

constructor multilineComments ({//{$1}//},{[["1", "comments"]]},{[]})

native function resetvars
  (ARGS) => {
    var fs = require("fs");
    fs.writeFileSync(__dirname + "/variables.json", JSON.stringify(require(__dirname + "/variablesdefault.json"), null, "\t"))
  }

constructor resetvars ({resetvars.},{[]},{[]})

native function loop
  (ARGS) => {
    for (var i = 0; i < ARGS.times; i++){
      if (broken) {
        broken = false;
        break;
      }
      if (skip) {
        skip = false;
        continue;
      }
      let program = ARGS.code;
      let _l = compileLines(program,syntaxoptions);
      _l = compileLines(program,syntax);
      for(let [i, line] of _l.entries()) {
        readFunction(line, false, i);
      }
    }
  }

constructor loop ({loop $1 {$2}},{[["1", "times"],["2", "code"]]},{["times"]})

native function codeBlock
  (ARGS) => {
    let program = ARGS.code;
    let _l = compileLines(program,syntaxoptions);
    _l = compileLines(program,syntax);
    for(let [i, line] of _l.entries()) {
      readFunction(line, false, i);
    }
  }

constructor codeBlock ({{$1}},{[["1", "code"]]},{[]})

native function codeBlock2
  (ARGS) => {
    return ARGS.code;
  }

constructor codeBlock2 ({($1)},{[["1", "code"]]},{["code"]})

native function toNum
  (ARGS) => {
    return Number(ARGS.str);
  }

constructor toNum ({number $1},{[["1", "str"]]},{["str"]})

native function toStr
  (ARGS) => {
    return String(ARGS.num);
  }

constructor toStr ({string $1},{[["1", "num"]]},{["num"]})

native function wait
  (ARGS) => {
    return new Promise(resolve => setTimeout(resolve, ARGS.num));
  }
constructor wait ({wait $1.},{[["1","num"]]},{["num"]})

native function waitExecution
  (ARGS) => {
    function execute() {
      let program = ARGS.code;
      let _l = compileLines(program,syntaxoptions);
      _l = compileLines(program,syntax);
      for(let [i, line] of _l.entries()) {
        readFunction(line, false, i);
      }
    }
    setTimeout(execute, ARGS.num);
  }
constructor waitExecution ({wait $1 {$2}},{[["1","num"],["2", "code"]]},{["num"]})

native function toggleignore
  (ARGS) => {
    ignore = !ignore;
    return ignore;
  }

constructor toggleignore ({!TOGGLEIGNORE},{[]},{[]})

native function undefined
  () => {
    return undefined
  }

constructor undefined ({undefined},{[]},{[]})

native function null
  () => {
    return null
  }

constructor null ({null},{[]},{[]})

native function function
  (ARGS) => {
    var args = ARGS.args != null ? ARGS.args.split(/\s*(,)(?=(?:[^"']|["'][^"']*["'])*$)\s*/g) : null;
    variables.args[ARGS.name] = [];
    if (args != null) {
      for (var i = 0; i < args.length; i++) {
        variables.args[ARGS.name].push(args[i]);
      }
    }
    functions[ARGS.name] = ARGS.code;
  }

native function call
  (ARGS) => {
    new Promise(resolve => setTimeout(resolve, 1));
    variables.return.locked = false
    variables.return.value = null;
    let program = functions[ARGS.name];
    let _l = compileLines(program,syntaxoptions);
    _l = compileLines(program,syntax);
    var args = variables.args[ARGS.name];
    var args2 = ARGS.args != null ? ARGS.args.split(/\s*(,)(?=(?:[^"']|["'][^"']*["'])*$)\s*/g) : null;
    if (args2 != null && args != null){
      for (var i = 0; i < args.length; i++) {
        if (!(args[i] in fns)) {
          readFunction("setvar " + args[i] + " = " + args2[i]);
        } else if(!ignore) {
          console.log("\x1b[31m%s\x1b[0m",`ExecutionError: Argument is already a function or variable.`);
          if (variables.stopOnError.value){
            return;
          }
        }
      }
    }
    var l = "";
    var index = 0;
    for (let [i, line] of _l.entries()){
      readFunction(line, false, i);
    }
    if (args != null) {
      for (var i = 0; i < args.length; i++) {
        delete fns[args[i]];
        delete variables[args[i]]
      }
    }
    var ret = variables.return.value;
    variables.return.value = null;
    variables.return.locked = true;
    returned = false;
    return ret;
  }

native function return
  (ARGS) => {
    if (!variables.return.locked) {
      variables.return.value = ARGS.code
      returned = true;
    } else {
      if (!ignore) {
        console.log("\x1b[31m%s\x1b[0m",`ExecutionError: Illegal return statement.`);
        if (variables.stopOnError.value){
          return;
        }
      }
    }
  }

constructor function ({gfunction $1[$2] {$3}},{[["1","name"],["2", "args"],["3","code"]]},{[]})
constructor call ({call $1[$2]},{[["1","name"], ["2", "args"]]},{[]})
constructor call ({call $1[]},{[["1","name"]]},{[]})
constructor return ({return $1.},{[["1","code"]]},{["code"]})

native function length
  (ARGS) => {
    if (typeof(ARGS.str) == "string") {
      return ARGS.str.length;
    } else {
      return undefined;
    }
  }

constructor length ({length $1},{[["1","str"]]},{["str"]})

native function indexof
  (ARGS) => {
    if (typeof(ARGS.str) == "string" && typeof(ARGS.index) == "number") {
      return ARGS.str[ARGS.index];
    } else {
      return undefined;
    }
  }

constructor indexof ({characterindex $1 of $2},{[["1","index"], ["2", "str"]]},{["index", "str"]})

constructor savevars ({savevars.},{[]},{[]})

native function break
  (ARGS) => {
    broken = true;
  }

native function continue
  (ARGS) => {
    skip = true;
  }

constructor break ({break.},{[]},{[]})
constructor continue ({continue.},{[]},{[]})

native function dirname
  (ARGS) => {
    var path = require("path");
    return path.dirname(filePath);
  }

constructor dirname ({dirname},{[]},{[]})

native function basename
  (ARGS) => {
    var path = require("path");
    return path.basename(filePath);
  }

constructor basename ({basename},{[]},{[]})

native function filename
  (ARGS) => {
    return (filePath);
  }

constructor filename ({filename},{[]},{[]})